<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs – docker</title><link>/tags/docker/</link><description>Recent content in docker on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorials: Deploying Lambda container image locally with Elastic Container Registry (ECR) using LocalStack</title><link>/tutorials/lambda-ecr-container-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tutorials/lambda-ecr-container-images/</guid><description>
&lt;img src="/tutorials/lambda-ecr-container-images/lambda-ecr-container-images-featured-image_hu7463366f652d9937d67f5c2a7f215c21_1237871_640x0_resize_catmullrom_3.png" width="640" height="360"/>
&lt;p>&lt;a href="https://aws.amazon.com/lambda/">Lambda&lt;/a> is a powerful serverless compute system that enables you to break down your application into smaller, independent functions. These functions can be deployed as individual units within the AWS ecosystem. Lambda offers seamless integration with various AWS services and supports multiple programming languages for different runtime environments. To deploy Lambda functions programmatically, you have two options: &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-zip.html">uploading a ZIP file containing your code and dependencies&lt;/a> or &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-images.html">packaging your code in a container image&lt;/a> and deploying it through Elastic Container Registry (ECR).&lt;/p>
&lt;p>&lt;a href="https://aws.amazon.com/ecr/">ECR&lt;/a> is an AWS-managed registry that facilitates the storage and distribution of containerized software. With ECR, you can effectively manage your image lifecycles, versioning, and tagging, separate from your application. It seamlessly integrates with other AWS services like ECS, EKS, and Lambda, enabling you to deploy your container images effortlessly. Creating container images for your Lambda functions involves using Docker and implementing the Lambda Runtime API according to the Open Container Initiative (OCI) specifications.&lt;/p>
&lt;p>&lt;a href="https://localstack.cloud">LocalStack Pro&lt;/a> extends support for Lambda functions using container images through ECR. It enables you to deploy your Lambda functions locally using LocalStack. In this tutorial, we will explore creating a Lambda function using a container image and deploying it locally with the help of LocalStack.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>Before diving into this tutorial, make sure you have the following prerequisites:&lt;/p>
&lt;ul>
&lt;li>LocalStack Pro&lt;/li>
&lt;li>&lt;a href="https://docs.localstack.cloud/integrations/aws-cli/#localstack-aws-cli-awslocal">&lt;code>awslocal&lt;/code> CLI&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.python.org/downloads/">Python&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://docker.io/">Docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="creating-a-lambda-function">Creating a Lambda function&lt;/h2>
&lt;p>To package and deploy a Lambda function as a container image, we&amp;rsquo;ll create a Lambda function containing our code and a Dockerfile. Create a new directory for your lambda function and navigate to it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>mkdir -p lambda-container-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>cd lambda-container-image&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Initialize the directory by creating two files: &lt;code>handler.py&lt;/code> and &lt;code>Dockerfile&lt;/code>. Use the following commands to create the files:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>touch handler.py Dockerfile&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Open the &lt;code>handler.py&lt;/code> file and add the following Python code, which represents a simple Lambda function that returns the message &lt;code>'Hello from LocalStack Lambda container image!'&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">event&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Hello from LocalStack Lambda container image!&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the code above, the &lt;code>handler&lt;/code> function is executed by the Lambda service whenever a trigger event occurs. It serves as the entry point for the Lambda function within the runtime environment and accepts &lt;code>event&lt;/code> and &lt;code>context&lt;/code> as parameters, providing information about the event and invocation properties, respectively.&lt;/p>
&lt;p>Following these steps, you have created the foundation for your Lambda function and defined its behaviour using Python code. In the following sections, we will package this code and its dependencies into a container image using the &lt;code>Dockerfile&lt;/code>.&lt;/p>
&lt;h2 id="building-the-image">Building the image&lt;/h2>
&lt;p>To package our Lambda function as a container image, we must create a Dockerfile containing the necessary instructions for building the image. Open the Dockerfile and add the following content. This Dockerfile uses the &lt;code>python:3.8&lt;/code> base image provided by AWS for Lambda and copies the &lt;code>handler.py&lt;/code> file into the image. It also specifies the function handler as &lt;code>handler.handler&lt;/code> to ensure the Lambda runtime can locate it where the Lambda handler is available.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> public.ecr.aws/lambda/python:3.8&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> ./handler.py ./&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">CMD&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;handler.handler&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">]&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If your Lambda function has additional dependencies, create a file named &lt;code>requirements.txt&lt;/code> in the same directory as the Dockerfile. List the required libraries in this file. You can install these dependencies in the &lt;code>Dockerfile&lt;/code> under the &lt;code>${LAMBDA_TASK_ROOT}&lt;/code> directory.
&lt;/div>
&lt;p>With the Dockerfile prepared, you can now build the container image using the following command, to check if everything works as intended:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker build .&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>By executing these steps, you have defined the Dockerfile that instructs Docker on how to build the container image for your Lambda function. The resulting image will contain your function code and any specified dependencies.&lt;/p>
&lt;h2 id="publishing-the-image-to-ecr">Publishing the image to ECR&lt;/h2>
&lt;p>Now that the initial setup is complete let&amp;rsquo;s explore how to leverage LocalStack&amp;rsquo;s AWS emulation by pushing our image to ECR and deploying the Lambda container image. Start LocalStack by executing the following command. Make sure to replace &lt;code>&amp;lt;your-api-key&amp;gt;&lt;/code> with your actual API key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>LOCALSTACK_API_KEY=&amp;lt;your-api-key&amp;gt; DEBUG=1 localstack start -d&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Once the LocalStack container is running, we can create a new ECR repository to store our container image. Use the &lt;code>awslocal&lt;/code> CLI to achieve this. Run the following command to create the repository, replacing &lt;code>localstack-lambda-container-image&lt;/code> with the desired name for your repository:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal ecr create-repository --repository-name localstack-lambda-container-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;repository&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;repositoryArn&amp;#34;: &amp;#34;arn:aws:ecr:us-east-1:000000000000:repository/localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;registryId&amp;#34;: &amp;#34;000000000000&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;repositoryName&amp;#34;: &amp;#34;localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;repositoryUri&amp;#34;: &amp;#34;localhost.localstack.cloud:4510/localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;createdAt&amp;#34;: &amp;lt;timestamp&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageTagMutability&amp;#34;: &amp;#34;MUTABLE&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageScanningConfiguration&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;scanOnPush&amp;#34;: false
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;encryptionConfiguration&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;encryptionType&amp;#34;: &amp;#34;AES256&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
To further customize the ECR repository, you can pass additional flags to the &lt;code>create-repository&lt;/code> command. For more details on the available options, refer to the &lt;a href="https://docs.aws.amazon.com/cli/latest/reference/ecr/create-repository.html">AWS CLI documentation&lt;/a>.
&lt;/div>
&lt;p>Next, build the image and push it to the ECR repository. Execute the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker build -t localhost:4510/localstack-lambda-container-image .
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker push localhost:4510/localstack-lambda-container-image&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>In the above commands, we specify the &lt;code>repositoryUri&lt;/code> as the image name to push the image to the ECR repository. After executing these commands, you can verify that the image is successfully pushed to the repository by using the &lt;code>describe-images&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal ecr describe-images --repository-name localstack-lambda-container-image
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageDetails&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;registryId&amp;#34;: &amp;#34;000000000000&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;repositoryName&amp;#34;: &amp;#34;localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageDigest&amp;#34;: &amp;#34;sha256:459fce12258ff1048925e0f4e7fb039d8b54111a8e3cca5db4acb434a9e8af37&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageTags&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;latest&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageSizeInBytes&amp;#34;: 184217147,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imagePushedAt&amp;#34;: &amp;lt;timestamp&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;imageManifestMediaType&amp;#34;: &amp;#34;application/vnd.docker.distribution.manifest.v2+json&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;artifactMediaType&amp;#34;: &amp;#34;application/vnd.docker.container.image.v1+json&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>By running this command, you can confirm that the image is now in the ECR repository. It ensures it is ready for deployment as a Lambda function using LocalStack&amp;rsquo;s AWS emulation capabilities.&lt;/p>
&lt;h2 id="deploying-the-lambda-function">Deploying the Lambda function&lt;/h2>
&lt;p>To deploy the container image as a Lambda function, we will create a new Lambda function using the &lt;code>create-function&lt;/code> command. Run the following command to create the function:&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Before creating the lambda function, please double check under which architecture you have built your image. If your image is built as arm64, you need to specify the lambda architecture when deploying or set &lt;code>LAMBDA_IGNORE_ARCHTIECTURE=1&lt;/code> when starting LocalStack.
More information can be found &lt;a href="/references/arm64-support/">in our documentation regarding ARM support.&lt;/a>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal lambda create-function \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --function-name localstack-lambda-container-image \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --package-type Image \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --code ImageUri=&amp;#34;localhost.localstack.cloud:4510/localstack-lambda-container-image&amp;#34; \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --role arn:aws:iam::000000000000:role/lambda-role \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --handler handler.handler
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;FunctionName&amp;#34;: &amp;#34;localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;FunctionArn&amp;#34;: &amp;#34;arn:aws:lambda:us-east-1:000000000000:function:localstack-lambda-container-image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Role&amp;#34;: &amp;#34;arn:aws:iam::000000000000:role/lambda-role&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Handler&amp;#34;: &amp;#34;handler.handler&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;CodeSize&amp;#34;: 0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Timeout&amp;#34;: 3,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;MemorySize&amp;#34;: 128,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;LastModified&amp;#34;: &amp;lt;timestamp&amp;gt;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;CodeSha256&amp;#34;: &amp;#34;9be73524cd5aa70fbcee3fc8d7aac4eb7e2a644e9ef2b13031719077a65c0031&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Version&amp;#34;: &amp;#34;$LATEST&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;TracingConfig&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Mode&amp;#34;: &amp;#34;PassThrough&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;RevisionId&amp;#34;: &amp;#34;cab4268c-2d56-4591-821a-9154e157b984&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;State&amp;#34;: &amp;#34;Pending&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;StateReason&amp;#34;: &amp;#34;The function is being created.&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;StateReasonCode&amp;#34;: &amp;#34;Creating&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;PackageType&amp;#34;: &amp;#34;Image&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Architectures&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;x86_64&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;EphemeralStorage&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;Size&amp;#34;: 512
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;SnapStart&amp;#34;: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ApplyOn&amp;#34;: &amp;#34;None&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;OptimizationStatus&amp;#34;: &amp;#34;Off&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The command provided includes several flags to create the Lambda function. Here&amp;rsquo;s an explanation of each flag:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ImageUri&lt;/code>: Specifies the image URI of the container image you pushed to the ECR repository (&lt;code>localhost.localstack.cloud:4510/localstack-lambda-container-image&lt;/code> in this case. Use the return &lt;code>repositoryUri&lt;/code> from the create-repository command).&lt;/li>
&lt;li>&lt;code>package-type&lt;/code>: Sets the package type to Image to indicate that the Lambda function will be created using a container image.&lt;/li>
&lt;li>&lt;code>function-name&lt;/code>: Specifies the name of the Lambda function you want to create.&lt;/li>
&lt;li>&lt;code>runtime&lt;/code>: Defines the runtime environment for the Lambda function. In this case, it&amp;rsquo;s specified as provided, indicating that the container image will provide the runtime.&lt;/li>
&lt;li>&lt;code>role&lt;/code>: Sets the IAM role ARN that the Lambda function should assume. In the example, a mock role ARN is used. For an actual role, please refer to the &lt;a href="/user-guide/aws/iam/">IAM documentation&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>To invoke the Lambda function, you can use the &lt;code>invoke&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal lambda invoke --function-name localstack-lambda-container-image /tmp/lambda.out
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;StatusCode&amp;#34;: 200,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;ExecutedVersion&amp;#34;: &amp;#34;$LATEST&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The command above will execute the Lambda function locally within the LocalStack environment. The response will include the StatusCode and ExecutedVersion. You can find the logs of the Lambda invocation in the Lambda container output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Hello from LocalStack Lambda container image!&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In conclusion, the Lambda container image support enables you to use Docker to package your custom code and dependencies for Lambda functions. With the help of LocalStack, you can seamlessly package, deploy, and invoke Lambda functions locally. It empowers you to develop, debug, and test your Lambda functions with a wide range of AWS services. For more advanced usage patterns, you can explore features like &lt;a href="/user-guide/tools/lambda-tools/hot-reloading/">Lambda Hot Reloading&lt;/a> and &lt;a href="/user-guide/tools/lambda-tools/debugging/">Lambda Debugging&lt;/a>.&lt;/p>
&lt;p>To further explore and experiment with the concepts covered in this tutorial, you can access the code and accompanying &lt;code>Makefile&lt;/code> on our &lt;a href="https://github.com/localstack/localstack-pro-samples/tree/master/lambda-container-image">LocalStack Pro samples over GitHub&lt;/a>.&lt;/p></description></item><item><title>User-Guide: LocalStack Docker Extension</title><link>/user-guide/tools/localstack-docker-extension/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/localstack-docker-extension/</guid><description>
&lt;p>The LocalStack Extension for Docker Desktop enables developers working with LocalStack to operate their LocalStack container via Docker Desktop, including checking service status, container logs, and configuring profiles. To install the LocalStack Extension for Docker Desktop, you need to have &lt;a href="https://www.docker.com/products/docker-desktop">Docker Desktop installed on your machine&lt;/a>.&lt;/p>
&lt;img src="localstack-docker-extension.png" alt="LocalStack Extension for Docker Desktop" title="LocalStack Extension for Docker Desktop" width="900" />
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>To utilize LocalStack&amp;rsquo;s Docker Extension, it is necessary to have a recent version of Docker Desktop (v4.8 or higher) installed on the local machine. To enable the extension, access the &lt;strong>Preferences&lt;/strong> tab and select the &lt;strong>Enable Docker Extensions&lt;/strong> option within the &lt;strong>Extensions&lt;/strong> tab.&lt;/p>
&lt;img src="localstack-docker-extension-preferences.png" title="Enable Docker Extensions in the Preferences within the Extensions tab" width="900" />
&lt;br>&lt;/br>
&lt;p>The LocalStack Extension for Docker Desktop has been validated and can be accessed on the Extensions Marketplace. To begin using it, navigate to the &lt;strong>Extensions Marketplace&lt;/strong>, search for &lt;strong>LocalStack&lt;/strong>, and click the &lt;strong>Install&lt;/strong> button to proceed with the installation.&lt;/p>
&lt;img src="localstack-docker-extension-marketplace.png" title="Discover the LocalStack Extension on the Docker Desktop Marketplace and install it!" width="900" />
&lt;br>&lt;/br>
&lt;p>An alternative method for installing the LocalStack&amp;rsquo;s Extension for Docker Desktop is pulling the &lt;a href="https://hub.docker.com/r/localstack/localstack-docker-desktop">public Docker image&lt;/a> from Docker Hub and installing it!&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker extension install localstack/localstack-docker-desktop:0.3.1&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>After installation, you can access the LocalStack Extension for Docker Desktop from the &lt;strong>Extensions&lt;/strong> tab. Upon the initial launch of the extension, a prompt to select a mount point for the LocalStack container will appear. Select your username from the drop-down menu. Furthermore, you can modify this setting later by navigating to the &lt;strong>Configurations&lt;/strong> tab and choosing a different mount point.&lt;/p>
&lt;img src="localstack-docker-extension-mount-point.png" title="Select the mount point upon the launch of LocalStack's Docker extension" width="900" />
&lt;h2 id="features">Features&lt;/h2>
&lt;p>LocalStack&amp;rsquo;s Docker Extension helps users to manage their LocalStack container with a simple and intuitive user interface through Docker Desktop. The extension includes container management, configuration profile management, service status, and container logs!&lt;/p>
&lt;h3 id="control-localstack">Control LocalStack&lt;/h3>
&lt;p>You can start, stop, and restart LocalStack from the Docker Desktop. You can also see the current status of your LocalStack container and navigate to LocalStack Web Application.&lt;/p>
&lt;img src="localstack-docker-extension-start.png" title="Start and Stop your LocalStack container with a single click of a button with LocalStack's extension" width="900" />
&lt;h3 id="localstack-insights">LocalStack insights&lt;/h3>
&lt;p>You can see the log information of the LocalStack container and all the available services and their status on the service page.&lt;/p>
&lt;img src="localstack-docker-extension-logs.png" title="Check the logs of your running LocalStack container through LocalStack's Docker extension" width="900" />
&lt;h3 id="localstack-configurations">LocalStack configurations&lt;/h3>
&lt;p>You can manage and use your profiles via configurations and create new configurations for your LocalStack container.&lt;/p>
&lt;img src="localstack-docker-extension-configuration-profile.png" title="Create your configuration profiles within LocalStack's Extension to affect the state of LocalStack" width="900" /></description></item><item><title>References: Docker Images</title><link>/references/docker-images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/docker-images/</guid><description>
&lt;p>LocalStack functions as a local “mini-cloud” operating system that runs inside a Docker container. LocalStack has multiple components, which include process management, file system abstraction, event processing, schedulers, and more. Running inside a Docker container, LocalStack exposes external network ports for integrations, SDKs, or CLI interfaces to connect to LocalStack APIs. The LocalStack &amp;amp; LocalStack Pro Docker images have been downloaded over 130+ million times and provide a multi-arch build compatible with AMD/x86 and ARM-based CPU architectures. This section will cover the different Docker images available for LocalStack and how to use them.&lt;/p>
&lt;h2 id="localstack-community-image">LocalStack Community image&lt;/h2>
&lt;p>The LocalStack Community image (&lt;code>localstack/localstack&lt;/code>) contains the community and open-source version of our &lt;a href="https://github.com/localstack/localstack">core cloud emulator&lt;/a>. To use the LocalStack Community image, you can pull the image from Docker Hub:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker pull localstack/localstack:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To use the LocalStack Community image, you don&amp;rsquo;t need to sign-up for an account on &lt;a href="https://app.localstack.cloud">LocalStack Web Application&lt;/a>. The Community image is free to use and does not require any API key to run. The Community image can be used to run &lt;a href="https://docs.localstack.cloud/user-guide/aws/">local AWS services&lt;/a> with &lt;a href="https://docs.localstack.cloud/user-guide/integrations/">integrations&lt;/a> on your local machine or in your &lt;a href="https://docs.localstack.cloud/user-guide/ci/">continuous integration pipelines&lt;/a>.&lt;/p>
&lt;p>The Community image also covers a limited set of &lt;a href="https://docs.localstack.cloud/user-guide/tools/">LocalStack Tools&lt;/a> to make your life as a cloud developer easier. You can use &lt;a href="https://localstack.cloud/products/cockpit/">LocalStack Cockpit&lt;/a> or &lt;a href="https://docs.localstack.cloud/user-guide/tools/localstack-docker-extension/">LocalStack Docker Extension&lt;/a> to use LocalStack with a graphical user interface.&lt;/p>
&lt;p>You can use the Community image to start your LocalStack container using various &lt;a href="https://docs.localstack.cloud/getting-started/installation/">installation methods&lt;/a>. While configuring to run LocalStack with Docker or Docker Compose, run the &lt;code>localstack/localstack&lt;/code> image with the appropriate tag you have pulled (if not &lt;code>latest&lt;/code>).&lt;/p>
&lt;h2 id="localstack-pro-image">LocalStack Pro image&lt;/h2>
&lt;p>LocalStack Pro contains various advanced extensions to the LocalStack base platform. With LocalStack Pro image, you can access all the emulated AWS cloud services running entirely on your local machine. To use the LocalStack Pro image, you can pull the image from Docker Hub:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker pull localstack/localstack-pro:latest&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To use the LocalStack Pro image, you must configure an environment variable named &lt;code>LOCALSTACK_API_KEY&lt;/code> to contain your API key. The LocalStack Pro image will display a warning if you do not set an API key (or if the key is invalid/expired) and will not activate the Pro features. LocalStack Pro gives you access to the complete set of LocalStack features, including the &lt;a href="https://app.localstack.cloud">LocalStack Web Application&lt;/a> and &lt;a href="https://docs.localstack.cloud/getting-started/help-and-support/#pro-support">dedicated customer support&lt;/a>.&lt;/p>
&lt;p>You can use the Pro image to start your LocalStack container using various &lt;a href="https://docs.localstack.cloud/getting-started/installation/">installation methods&lt;/a>. While configuring to run LocalStack with Docker or Docker Compose, run the &lt;code>localstack/localstack-pro&lt;/code> image with the appropriate tag you have pulled (if not &lt;code>latest&lt;/code>).&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Notes&lt;/h4>
Earlier, we maintained &lt;code>localstack/localstack-light&lt;/code> and &lt;code>localstack/localstack-full&lt;/code> images. They have been deprecated and are removed with the LocalStack 2.0 release. The &lt;a href="https://hub.docker.com/r/localstack/bigdata/tags">BigData image&lt;/a>, which started as a &lt;code>bigdata_container&lt;/code> container, has also been deprecated in favor of a BigData Mono container which installs dependencies directly into the LocalStack (&lt;code>localstack_main&lt;/code>) container.
&lt;/div>
&lt;h2 id="image-tags">Image tags&lt;/h2>
&lt;p>We use tags for versions with significant features, enhancements, or bug fixes - following &lt;a href="https://semver.org">semantic versioning&lt;/a>. To ensure that we move quickly and steadily, we run nightly builds, where all our updates are available on the &lt;code>latest&lt;/code> tag of LocalStack&amp;rsquo;s Docker image. We intend to announce more significant features and enhancements during major &amp;amp; minor releases. We occasionally create patch releases for minor bug fixes and enhancements, to ensure that we can deliver changes quickly while not breaking your existing workflows (in case you prefer not to use &lt;code>latest&lt;/code>).&lt;/p>
&lt;p>To check out the various tags available for LocalStack, you can visit the &lt;a href="https://hub.docker.com/r/localstack/localstack/tags?page=1&amp;amp;ordering=last_updated">LocalStack Community&lt;/a> &amp;amp; &lt;a href="https://hub.docker.com/r/localstack/localstack-pro/tags?page=1&amp;amp;ordering=last_updated">LocalStack Pro&lt;/a> Docker Hub pages.&lt;/p></description></item><item><title>References: Podman</title><link>/references/podman/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/podman/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>By default, the LocalStack CLI starts the LocalStack runtime inside a Docker container.
Docker may not be available on your system, and a popular alternative is &lt;a href="https://podman.io/getting-started/">Podman&lt;/a> which you can use to run LocalStack.
Podman support is still experimental, and the following docs give you an overview of the current state.&lt;/p>
&lt;p>From the Podman docs:&lt;/p>
&lt;blockquote>
&lt;p>Podman is a daemonless, open source, Linux native tool designed to make it easy to find, run, build, share and deploy applications using Open Containers Initiative (OCI) Containers and Container Images. Podman provides a command line interface (CLI) familiar to anyone who has used the Docker Container Engine. Most users can simply alias Docker to Podman (&lt;code>alias docker=podman&lt;/code>) without any problems.&lt;/p>
&lt;/blockquote>
&lt;h2 id="options">Options&lt;/h2>
&lt;p>To run &lt;code>localstack&lt;/code>, simply aliasing &lt;code>alias docker=podman&lt;/code> is not enough, for the following reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;code>localstack&lt;/code> is using &lt;a href="https://pypi.org/project/docker/">docker-py&lt;/a> which requires a connection to &lt;code>/var/run/docker.sock&lt;/code>&lt;/li>
&lt;li>Lambda requires mounting the Docker socket &lt;code>/var/run/docker.sock&lt;/code> into the container (see &lt;a href="/user-guide/aws/lambda/">Lambda providers&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>Here are several options on running LocalStack using podman:&lt;/p>
&lt;h3 id="podman-docker">podman-docker&lt;/h3>
&lt;p>The package &lt;code>podman-docker&lt;/code> emulates the Docker CLI using podman. It creates the following links:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/usr/bin/docker -&amp;gt; /usr/bin/podman&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/run/docker.sock -&amp;gt; /run/podman/podman.sock&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>This package is available for some distros:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://archlinux.org/packages/community/x86_64/podman-docker/">https://archlinux.org/packages/community/x86_64/podman-docker/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packages.ubuntu.com/impish/podman-docker">https://packages.ubuntu.com/impish/podman-docker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://packages.debian.org/sid/podman-docker">https://packages.debian.org/sid/podman-docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="rootfull-podman-with-podman-docker">Rootfull Podman with podman-docker&lt;/h3>
&lt;p>The simplest option is to run &lt;code>localstack&lt;/code> using &lt;code>podman&lt;/code> by having &lt;code>podman-docker&lt;/code> and running &lt;code>localstack start&lt;/code> as root&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sh -c &lt;span style="color:#4e9a06">&amp;#39;DEBUG=1 localstack start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rootfull-podman-without-podman-docker">Rootfull Podman without podman-docker&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you still have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo systemctl start podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># you have to pass a bunch of env variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo sh -c &lt;span style="color:#4e9a06">&amp;#39;DEBUG=1 DOCKER_CMD=podman DOCKER_HOST=unix://run/podman/podman.sock DOCKER_SOCK=/run/podman/podman.sock localstack start&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="rootless-podman">Rootless Podman&lt;/h3>
&lt;p>You have to prepare your environment first:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wiki.archlinux.org/title/Podman#Rootless_Podman">https://wiki.archlinux.org/title/Podman#Rootless_Podman&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md">https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.redhat.com/sysadmin/rootless-podman">https://www.redhat.com/sysadmin/rootless-podman&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># again, you have to start the podman socket first&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>systemctl --user start podman.service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># and then localstack&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">DOCKER_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;podman&amp;#34;&lt;/span> &lt;span style="color:#000">DOCKER_SOCK&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock &lt;span style="color:#000">DOCKER_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unix://&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock localstack start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you have problems with &lt;a href="https://wiki.archlinux.org/title/Podman#Set_subuid_and_subgid">subuid and subgid&lt;/a>, you could try to use &lt;a href="https://www.redhat.com/sysadmin/controlling-access-rootless-podman-users">overlay.ignore_chown_errors option&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DEBUG&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">DOCKER_CMD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;podman --storage-opt overlay.ignore_chown_errors=true&amp;#34;&lt;/span> &lt;span style="color:#000">DOCKER_SOCK&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock &lt;span style="color:#000">DOCKER_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unix://&lt;span style="color:#000">$XDG_RUNTIME_DIR&lt;/span>/podman/podman.sock localstack start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>