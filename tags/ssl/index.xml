<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs â€“ ssl</title><link>/tags/ssl/</link><description>Recent content in ssl on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/ssl/index.xml" rel="self" type="application/rss+xml"/><item><title>References: Custom TLS certificates</title><link>/references/custom-tls-certificates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/custom-tls-certificates/</guid><description>
&lt;h2 id="background">Background&lt;/h2>
&lt;p>LocalStack sometimes performs on-demand fetching of resources from the public internet.
This requires that LocalStack is able to access public URLs.
If there is a proxy server in your network that uses a non-standard TLS certificate, LocalStack will not be able to download any files on demand.
You may see errors in the logs relating to TLS such as &amp;ldquo;unable to get local issuer certificate&amp;rdquo;.&lt;/p>
&lt;p>There are three options when running LocalStack:&lt;/p>
&lt;ol>
&lt;li>&lt;a href="#creating-a-custom-docker-image">creating a custom Docker image&lt;/a>,&lt;/li>
&lt;li>&lt;a href="#custom-ssl-certificates-with-init-hooks">using init hooks&lt;/a> or&lt;/li>
&lt;li>&lt;a href="#custom-ssl-certificates-with-host-mode">when running in host mode&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>They all can be summarised as:&lt;/p>
&lt;ol>
&lt;li>get your proxy&amp;rsquo;s custom certificate into the system certificate store, and&lt;/li>
&lt;li>configure &lt;a href="https://pypi.python.org/pypi/requests">&lt;code>requests&lt;/code>&lt;/a> to use the custom certificate,&lt;/li>
&lt;li>configure &lt;a href="https://curl.se/">&lt;code>curl&lt;/code>&lt;/a> to use the custom certificate, and&lt;/li>
&lt;li>configure &lt;a href="https://nodejs.org/">&lt;code>node.js&lt;/code>&lt;/a> to use the custom certificate.&lt;/li>
&lt;/ol>
&lt;h2 id="creating-a-custom-docker-image">Creating a custom docker image&lt;/h2>
&lt;p>If you run LocalStack in a docker container (which includes using &lt;a href="/getting-started/#localstack-cli">the CLI&lt;/a>, &lt;a href="/getting-started/#docker">docker&lt;/a>, &lt;a href="/getting-started/#docker-compose">docker-compose&lt;/a>, &lt;a href="/getting-started/#localstack-cockpit">cockpit&lt;/a> or &lt;a href="/getting-started/#helm">helm&lt;/a>), to include a custom TLS root certificate a new docker image should be created.&lt;/p>
&lt;p>Create a &lt;code>Dockerfile&lt;/code> containing the following commands:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-docker" data-lang="docker">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> localstack/localstack:latest&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># or if using the pro image:&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">FROM&lt;/span>&lt;span style="color:#4e9a06"> localstack/localstack-pro:latest&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">COPY&lt;/span> &amp;lt;your custom certificate.crt&amp;gt; /usr/local/share/ca-certificates/cert-bundle.crt&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">RUN&lt;/span> update-ca-certificates&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENV&lt;/span> &lt;span style="color:#000">CURL_CA_BUNDLE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/ssl/certs/ca-certificates.crt&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENV&lt;/span> &lt;span style="color:#000">REQUESTS_CA_BUNDLE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/ssl/certs/ca-certificates.crt&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">ENV&lt;/span> &lt;span style="color:#000">NODE_EXTRA_CA_CERTS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/etc/ssl/certs/ca-certificates.crt&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and build the image:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>docker build -t &amp;lt;image name&amp;gt; .&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Certificate files must end in &lt;code>.crt&lt;/code> to be included in the system certificate store.
If your certificate file ends with &lt;code>.pem&lt;/code>, you can rename it to end in &lt;code>.crt&lt;/code>.
&lt;/div>
&lt;h3 id="starting-localstack-with-the-custom-image">Starting LocalStack with the custom image&lt;/h3>
&lt;p>LocalStack now needs to be configured to use this custom image. The workflow is different depending on how you start localstack.&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-10" role="tablist">
&lt;li class="nav-item">
&lt;a class="nav-link active persistLang-bash"
id="tabs-10-00-tab" data-toggle="tab" href="#tabs-10-00" role="tab"
onclick="persistLang(&amp;#34;bash&amp;#34;);"aria-controls="tabs-10-00" aria-selected="false">
CLI
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link"
id="tabs-10-01-tab" data-toggle="tab" href="#tabs-10-01" role="tab"
aria-controls="tabs-10-01" aria-selected="false">
Docker
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link"
id="tabs-10-02-tab" data-toggle="tab" href="#tabs-10-02" role="tab"
aria-controls="tabs-10-02" aria-selected="false">
docker-compose.yml
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="tabs-10-content">
&lt;div class="tab-pane fade show active"
id="tabs-10-00" role="tabpanel" aria-labelled-by="tabs-10-00-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">IMAGE_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;image name&amp;gt; localstack start&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-10-01" role="tabpanel" aria-labelled-by="tabs-10-01-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run &amp;lt;docker arguments&amp;gt; &amp;lt;image name&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-10-02" role="tabpanel" aria-labelled-by="tabs-10-02-tab">
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yml" data-lang="yml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">services&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">localstack&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">&amp;lt;image name&amp;gt;&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># the rest of your configuration&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="custom-tls-certificates-with-init-hooks">Custom TLS certificates with init hooks&lt;/h2>
&lt;p>It is recommended to create a &lt;code>boot&lt;/code> init hook. Create a directory on your local system that includes&lt;/p>
&lt;ul>
&lt;li>the certificate you wish to copy, and&lt;/li>
&lt;li>the following shell script:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">set&lt;/span> -euo pipefail
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cp /etc/localstack/init/boot.d/&amp;lt;your certificate file&amp;gt;.crt /usr/local/share/ca-certificates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>update-ca-certificates
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then run LocalStack with the environment variables&lt;/p>
&lt;ul>
&lt;li>&lt;code>REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt&lt;/code>, and&lt;/li>
&lt;li>&lt;code>CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt&lt;/code>, and&lt;/li>
&lt;li>&lt;code>NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>and follow the instructions fn the &lt;a href="/references/init-hooks/">init hooks documentation&lt;/a> for configuring LocalStack to use the hook directory as a &lt;code>boot&lt;/code> hook.&lt;/p>
&lt;h2 id="custom-tls-certificates-with-host-mode">Custom TLS certificates with host mode&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>On linux the custom certificate should be added to your &lt;code>ca-certificates&lt;/code> bundle. For example on Debian based systems (as root):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix"># &lt;/span>cp &amp;lt;your custom certificate.crt&amp;gt; /usr/local/share/ca-certificates
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix"># &lt;/span>update-ca-certificates&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Then run LocalStack with the environment variables &lt;code>REQUESTS_CA_BUNDLE&lt;/code>, &lt;code>CURL_CA_BUNDLE&lt;/code>, and `NODE_EXTRA_CA_CERTS``:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localstack start --host&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="macos">macOS&lt;/h3>
&lt;p>On macOS the custom certificate should be added to your keychain. See &lt;a href="https://support.apple.com/en-gb/guide/keychain-access/kyca2431/mac">this Apple support article&lt;/a> for more information.&lt;/p>
&lt;p>Then run LocalStack with the environment variables &lt;code>REQUESTS_CA_BUNDLE&lt;/code>, &lt;code>CURL_CA_BUNDLE&lt;/code>, and `NODE_EXTRA_CA_CERTS``:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>NODE_EXTRA_CA_CERTS=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CURL_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localstack start --host&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;p>Currently host mode does not work with Windows. If you are using WSL2 you should follow the &lt;a href="#linux">Linux&lt;/a> steps above.&lt;/p></description></item></channel></rss>