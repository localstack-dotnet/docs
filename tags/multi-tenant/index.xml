<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs â€“ multi-tenant</title><link>/tags/multi-tenant/</link><description>Recent content in multi-tenant on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/tags/multi-tenant/index.xml" rel="self" type="application/rss+xml"/><item><title>References: Cross-Account and Cross-Region Access</title><link>/references/cross-account-access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/cross-account-access/</guid><description>
&lt;p>LocalStack automatically namespaces all resources based on the account ID and, in some cases, the region.
However, there are certain resource types that can be accessed across multiple accounts or regions.
This document provides information to help design such setups.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Cross-account support in LocalStack is being actively developed.
Please report any issues on our &lt;a href="https://github.com/localstack/localstack/issues/new/choose">GitHub issue tracker&lt;/a>.
&lt;/div>
&lt;h2 id="cross-account">Cross-Account&lt;/h2>
&lt;p>Resources that can be accessed across multiple accounts are always identified by their Amazon Resource Names (ARNs).
The full list of resources and operations that allow cross-account access are listed below.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
IAM currently does not enforce cross-account access.
Any ACLs, identity-based or resource-based policy attached to these operations or resources will be ignored.
&lt;/div>
&lt;h3 id="lambda-functions-and-layers">Lambda functions and layers&lt;/h3>
&lt;ul>
&lt;li>&lt;code>AddLayerVersionPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>CreateAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteFunctionConcurrency&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteLayerVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>GetAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>GetFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>GetFunctionConfiguration&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersionByArn&lt;/code>&lt;/li>
&lt;li>&lt;code>GetLayerVersionPolicy&lt;/code>&lt;/li>
&lt;li>&lt;code>GetPolicy&lt;/code>&lt;/li>
&lt;li>&lt;code>Invoke&lt;/code>&lt;/li>
&lt;li>&lt;code>ListAliases&lt;/code>&lt;/li>
&lt;li>&lt;code>ListLayerVersions&lt;/code>&lt;/li>
&lt;li>&lt;code>ListTags&lt;/code>&lt;/li>
&lt;li>&lt;code>ListVersionsByFunction&lt;/code>&lt;/li>
&lt;li>&lt;code>PublishVersion&lt;/code>&lt;/li>
&lt;li>&lt;code>PutFunctionConcurrency&lt;/code>&lt;/li>
&lt;li>&lt;code>RemoveLayerVersionPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>TagResource&lt;/code>&lt;/li>
&lt;li>&lt;code>UntagResource&lt;/code>&lt;/li>
&lt;li>&lt;code>UpdateAlias&lt;/code>&lt;/li>
&lt;li>&lt;code>UpdateFunctionCode&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="sqs-queues">SQS queues&lt;/h3>
&lt;p>On AWS, all operations except &lt;code>AddPermission&lt;/code>, &lt;code>CreateQueue&lt;/code>, &lt;code>DeleteQueue&lt;/code>, &lt;code>ListQueues&lt;/code>, &lt;code>ListQueueTags&lt;/code>, &lt;code>RemovePermission&lt;/code>, &lt;code>SetQueueAttributes&lt;/code>, &lt;code>TagQueue&lt;/code> and &lt;code>UntagQueue&lt;/code> allow cross-account access.&lt;/p>
&lt;p>On LocalStack, all operations allow cross-account access.&lt;/p>
&lt;h3 id="kms-keys">KMS keys&lt;/h3>
&lt;ul>
&lt;li>&lt;code>CreateGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Decrypt&lt;/code>&lt;/li>
&lt;li>&lt;code>DescribeKey&lt;/code>&lt;/li>
&lt;li>&lt;code>Encrypt&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKey&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyPair&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyPairWithoutPlaintext&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateDataKeyWithoutPlaintext&lt;/code>&lt;/li>
&lt;li>&lt;code>GenerateMac&lt;/code>&lt;/li>
&lt;li>&lt;code>GetKeyRotationStatus&lt;/code>&lt;/li>
&lt;li>&lt;code>GetPublicKey&lt;/code>&lt;/li>
&lt;li>&lt;code>ListGrants&lt;/code>&lt;/li>
&lt;li>&lt;code>RetireGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>RevokeGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>Sign&lt;/code>&lt;/li>
&lt;li>&lt;code>Verify&lt;/code>&lt;/li>
&lt;li>&lt;code>VerifyMac&lt;/code>&lt;/li>
&lt;/ul>
&lt;!-- - ReEncrypt (NOT IMPLEMENTED IN LOCALSTACK) -->
&lt;h3 id="sns-topics">SNS topics&lt;/h3>
&lt;ul>
&lt;li>&lt;code>AddPermission&lt;/code>&lt;/li>
&lt;li>&lt;code>DeleteTopic&lt;/code>&lt;/li>
&lt;li>&lt;code>GetTopicAttributes&lt;/code>&lt;/li>
&lt;li>&lt;code>ListSubscriptionByTopic&lt;/code>&lt;/li>
&lt;li>&lt;code>Publish&lt;/code>&lt;/li>
&lt;li>&lt;code>RemovePermission&lt;/code>&lt;/li>
&lt;li>&lt;code>SetTopicAttributes&lt;/code>&lt;/li>
&lt;li>&lt;code>Subscribe&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="s3-buckets">S3 buckets&lt;/h3>
&lt;p>Like AWS, LocalStack S3 has a bucket namespace which is shared by all accounts.
This means that the bucket name has to be globally unique.&lt;/p>
&lt;ul>
&lt;li>&lt;code>GetObject&lt;/code>&lt;/li>
&lt;li>&lt;code>ListObjects&lt;/code>&lt;/li>
&lt;li>&lt;code>PutObject&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="cross-region">Cross-Region&lt;/h2>
&lt;p>AWS provides individual API endpoints for each region, and typically, resources can only be accessed within their respective regions.&lt;/p>
&lt;p>On the other hand, LocalStack operates on a unified API endpoint, allowing interactions with services across regions.&lt;/p></description></item><item><title>References: Multi-Account Setups</title><link>/references/multi-account-setups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/references/multi-account-setups/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Please note that multi-accounts may not work for use-cases that have cross-account and cross-service access.
See &lt;a href="https://github.com/localstack/localstack/issues/7041">this issue&lt;/a> for more information.
&lt;/div>
&lt;p>LocalStack ships with multi-account support which allows namespacing based on AWS account ID.&lt;/p>
&lt;p>LocalStack uses the value in the AWS Access Key ID field for the purpose of namespacing over account ID.
For more information, see &lt;a href="/references/credentials/">Credentials&lt;/a>.&lt;/p>
&lt;p>The Access Key ID field can be configured in the AWS CLI in multiple ways: please refer to &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-precedence">AWS CLI documentation&lt;/a>.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>In following examples, we configure the AWS CLI account ID via environment variable.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>AWS_ACCESS_KEY_ID=000000000001 awslocal ec2 create-key-pair --key-name green-hospital
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>AWS_ACCESS_KEY_ID=000000000002 awslocal ec2 create-key-pair --key-name red-medicine
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>AWS_ACCESS_KEY_ID=000000000001 awslocal ec2 describe-key-pairs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyPairs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyFingerprint&amp;#34;: &amp;#34;6b:e3:a3:41:4b:60:f3:6d:7b:84:3e:17:e3:ad:d0:15&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyName&amp;#34;: &amp;#34;green-hospital&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>AWS_ACCESS_KEY_ID=000000000002 awslocal ec2 describe-key-pairs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyPairs&amp;#34;: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyFingerprint&amp;#34;: &amp;#34;16:4c:64:13:36:41:7c:75:d0:51:f0:db:ed:d7:c8:95&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyName&amp;#34;: &amp;#34;red-medicine&amp;#34;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>If no explicit Account ID is set, LocalStack falls back to default. In this example, no resources are returned.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal ec2 describe-key-pairs
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;KeyPairs&amp;#34;: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>