<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs – Tools</title><link>/categories/tools/</link><description>Recent content in Tools on Docs</description><generator>Hugo -- gohugo.io</generator><atom:link href="/categories/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>User-Guide: Getting started with the Cloud Pods CLI</title><link>/user-guide/tools/cloud-pods/getting-started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/cloud-pods/getting-started/</guid><description>
&lt;p>With the LocalStack Cloud Pods command-line interface (CLI), the &lt;code>pod&lt;/code> command, you can create cloud pods and manage them from a terminal. The Cloud Pods CLI is ideal in the following situations:&lt;/p>
&lt;ul>
&lt;li>Taking a snapshot of your running LocalStack instance.&lt;/li>
&lt;li>Sharing your snapshot across teams with LocalStack Team features.&lt;/li>
&lt;li>Injecting snapshots into a running instance without a restart.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>LocalStack Cloud Pods CLI is directly available with the LocalStack installation, and no further installation is required to get started. If you are a Pro user, we recommend you to export the &lt;code>LOCALSTACK_API_KEY&lt;/code> as an environment variable to allow you to use the full spectrum of LocalStack Cloud Pods feature.&lt;/p>
&lt;p>This tutorial is intended for licensed users. The Community users can replicate a similar workflow by leveraging the &lt;code>save&lt;/code> and &lt;code>load&lt;/code> commands available to them. For more details, look at our &lt;a href="/user-guide/tools/cloud-pods/community/">Community Cloud Pods guide&lt;/a>.&lt;/p>
&lt;h2 id="basic-example">Basic example&lt;/h2>
&lt;p>In this tutorial, you&amp;rsquo;ll learn how to make a basic usage of LocalStack Cloud Pods CLI. This tutorial is intended for Pro users who wish to get more acquainted with Cloud Pods CLI. It assumes you have basic knowledge of:&lt;/p>
&lt;ul>
&lt;li>LocalStack&lt;/li>
&lt;li>&lt;code>awscli&lt;/code> commands&lt;/li>
&lt;li>Understanding of Cloud Pods workflow&lt;/li>
&lt;/ul>
&lt;p>By the end of this tutorial, you would be able to create a snapshot of your running LocalStack instance, commit it and would be able to push this to your LocalStack account.&lt;/p>
&lt;h3 id="procedure">Procedure&lt;/h3>
&lt;p>To get started, start your LocalStack instance with your &lt;code>LOCALSTACK_API_KEY&lt;/code> configured as an environment variable:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Use the &lt;code>awslocal&lt;/code> CLI to create AWS resources inside your running LocalStack instance.&lt;/p>
&lt;p>As an example, we will create a S3 bucket using the &lt;code>awslocal&lt;/code> CLI and enter some data inside it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 mb s3://test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>echo &amp;#34;hello world&amp;#34; &amp;gt; /tmp/hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 cp /tmp/hello-world s3://test/hello-world
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 ls s3://test/&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Save your Pod state using the &lt;code>save&lt;/code> command by specifying the desired name as the first argument. This command will save the pod and register it to the remote platform. Optionally you can attach a message to the saved Cloud Pod with the &lt;code>--message&lt;/code> flag:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save &amp;lt;pod-name&amp;gt; --message &amp;#34;&amp;lt;description-message&amp;gt;&amp;#34;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Check the list of Cloud Pods available to you and your organization using the &lt;code>list&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┏━━━━━━━━━━━━━━┳━━━━━━━━━━━┓
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┃ local/remote ┃ Name ┃
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ┡━━━━━━━━━━━━━━╇━━━━━━━━━━━┩
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> │ local+remote │ pod-name │
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └──────────────┴───────────┘&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Optional: You can inspect the contents of a Cloud Pod using the &lt;code>inspect&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod inspect --name &amp;lt;pod-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 000000000000
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - S3
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - global
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - listBuckets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Buckets
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - 0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Name = test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - CreationDate = 2022-10-04T17:03:47.000Z
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - Owner
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - DisplayName = webfile
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - ID = bcaf1ffd86f41161ca5fb16fd081034f&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>On an alternate machine, start LocalStack with the API key configured, and pull the Cloud Pod we created previously using &lt;code>load&lt;/code> command with the Cloud Pod name as the first argument:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod load &amp;lt;pod-name&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Done.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let&amp;rsquo;s check the S3 buckets in our Cloud Pod:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 ls s3://test/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 2022-10-04 22:33:54 12 hello-world&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Optional: You can make the Cloud Pod available to users outside your organization by making it public:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save &amp;lt;pod-name&amp;gt; --visibility public&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>For a more detailed manual, refer to our &lt;a href="/user-guide/tools/cloud-pods/pods-cli/">command-line interface (CLI) guide&lt;/a>. To check your Pods on the LocalStack Web user interface, navigate to &lt;a href="https://app.localstack.cloud/pods">Cloud Pods page&lt;/a>.&lt;/p></description></item><item><title>User-Guide: Community Cloud Pods</title><link>/user-guide/tools/cloud-pods/community/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/cloud-pods/community/</guid><description>
&lt;p>LocalStack supports Community Cloud Pods to give our community users a limited Cloud Pods experience. Using Community Cloud Pods, you get two commands: &lt;code>save&lt;/code> and &lt;code>load&lt;/code> to save the container state in a Cloud Pod and dump it into their running LocalStack container at any given time, respectively.&lt;/p>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;p>In this getting started guide, we will demonstrate how community users can leverage Community Cloud Pods to save the state of their running LocalStack instance permanently. To get started, you would only need &lt;code>awscli&lt;/code> installed. We intend this feature to be open to community users; hence no &lt;code>LOCALSTACK_API_KEY&lt;/code> is required.&lt;/p>
&lt;p>Let us start by creating some AWS resources in LocalStack. Just a mere example, let us create a S3 bucket and a SQS queue:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 mb s3://test
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal sqs create-queue --queue-name test-queue&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Let us dump such a simple state into a Cloud Pod using the &lt;code>save&lt;/code> command. This command takes a file URI as an argument and creates a ZIP file in the specified directory. Assuming we want to create a pod named &lt;code>awesome-pod&lt;/code> in our Desktop folder, we will run the below commands to save an &lt;code>awesome-pod&lt;/code> in your Desktop directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save file:///Users/&amp;lt;my_username&amp;gt;/Desktop/awesome-pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloud Pods file:///Users/&amp;lt;my_username&amp;gt;/Desktop/awesome-pod successfully exported&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>This exported ZIP file now contains the state we previously created, and we can restore it at any time with the inverse command, i.e., &lt;code>load&lt;/code>. For instance, the following command will restore the same state of a fresh instance of LocalStack:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod load file:///Users/&amp;lt;my_username&amp;gt;/Desktop/awesome-pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Cloud Pods file:///Users/&amp;lt;my_username&amp;gt;/Desktop/awesome-pod successfully loaded&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>It is worth noting that the &lt;code>load&lt;/code> command also allows loading a Cloud Pod stored at a given URL. We also provide a short-hand option to load Cloud Pods saved in a public GitHub repository. To showcase this possibility, we opened a new public repository at &lt;a href="https://github.com/localstack/cloud-pods">localstack/cloud-pods&lt;/a>, where we started storing several Cloud Pods for demonstration purposes.&lt;/p>
&lt;p>For example, we uploaded a Cloud Pod named &lt;code>s3-trigger-thumbnail&lt;/code> based on an &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/with-s3-tutorial.html">official AWS documentation tutorial&lt;/a>. This Cloud Pod stores a simple application consisting of two S3 buckets and a Lambda function. For each &lt;code>jpg&lt;/code> image uploaded in one of the buckets, the Lamda function will create a thumbnail of it and store it in the other bucket.&lt;/p>
&lt;p>To load this Cloud Pod, you can run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod load git://localstack/cloud-pods/s3-trigger-thumbnail&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>The above command is equivalent to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod load https://raw.githubusercontent.com/localstack/cloud-pods/main/s3-trigger-thumbnail&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>To test the loaded pod, you can run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 cp &amp;lt;path_to_file&amp;gt;.jpg s3://img-bucket&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>To check the content of the destination bucket run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>awslocal s3 ls s3://img-bucket-resized&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="limitations">Limitations&lt;/h2>
&lt;p>Community Cloud Pods have some limitations:&lt;/p>
&lt;ul>
&lt;li>Only Community-available AWS services can be saved and loaded in a Community Cloud Pod.&lt;/li>
&lt;li>Users are responsible for storing their saved states. Pro users can use our Cloud Pods platform to make storing and sharing their saved states easier.&lt;/li>
&lt;li>Cloud Pods for Community users do not support versioning out of the box.&lt;/li>
&lt;/ul></description></item><item><title>User-Guide: Cloud Pods CLI command reference</title><link>/user-guide/tools/cloud-pods/pods-cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/cloud-pods/pods-cli/</guid><description>
&lt;p>This reference provides descriptions and example commands for LocalStack Cloud Pods CLI (&lt;code>pod&lt;/code>) commands.&lt;/p>
&lt;h2 id="syntax">Syntax&lt;/h2>
&lt;p>Use the following syntax to run &lt;code>localstack pod&lt;/code> commands from your terminal window:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod [OPTIONS] COMMAND [ARGS]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>In the above syntax:&lt;/p>
&lt;ul>
&lt;li>&lt;code>COMMAND&lt;/code> specifies the operation you want to perform with your Cloud Pods (&lt;code>save&lt;/code> or &lt;code>load&lt;/code>).&lt;/li>
&lt;li>&lt;code>OPTIONS&lt;/code> specifies the optional flags.&lt;/li>
&lt;li>&lt;code>ARGS&lt;/code> specifies the command arguments.&lt;/li>
&lt;/ul>
&lt;h2 id="commands">Commands&lt;/h2>
&lt;p>The following section lists the available commands for the Cloud Pods CLI.&lt;/p>
&lt;h3 id="save">&lt;code>save&lt;/code>&lt;/h3>
&lt;p>The &lt;code>save&lt;/code> command creates a new version of a Cloud Pod. Pro users can dump the Cloud Pod locally or upload it to the LocalStack platform. To dump the state locally, pass a local file URI as an argument to the &lt;code>save&lt;/code> command. For instance, the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save file://&amp;lt;path_to_disk&amp;gt;/my-pod&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The above command will create a zip file named &lt;code>my-pod&lt;/code> to the specified location on the disk. To use the Cloud Pods platform, specify the Cloud Pod&amp;rsquo;s name as an argument, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod save my-pod&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The above command creates a version of &lt;code>my-pod&lt;/code> and registers it to our platform. Pushing already existing pod results in creating a new version and, eventually, uploading it to the platform. Users can also select a subset of AWS services they wish to incorporate in a new Cloud Pod version with the &lt;code>--services&lt;/code> option.&lt;/p>
&lt;p>Users who want to make a Cloud Pod accessible outside their organization can mark it as &lt;strong>public&lt;/strong> with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack pod push --name &amp;lt;pod_name&amp;gt; --visibility public&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The above command does not create a new version and requires a version already registered with the platform. The CLI manual for the &lt;code>save&lt;/code> command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod save &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> URL_OR_NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Save the current state of the LocalStack container in a Cloud Pod. A Cloud Pod can be exported
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> locally or registered within the LocalStack Pod&lt;span style="color:#4e9a06">&amp;#39;s platform (with a Pro license). An optional
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> message can be attached to any Cloud Pod. Furthermore, one could decide to export only a subset
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> of services with the optional --service option.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> To export on a local path run the following command:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> localstack pod save file://&amp;lt;path_on_disk&amp;gt;/&amp;lt;pod_name&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> The output will be a &amp;lt;pod_name&amp;gt; zip file in the specified directory. This Cloud Pod instance can
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> be restored at any point in time with the load command.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> To use the LocalStack Pod&amp;#39;&lt;/span>s platform, the desired Pod&lt;span style="color:#4e9a06">&amp;#39;s name only will suffice, e,g.:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> localstack pod save &amp;lt;pod_name&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> Please be aware that each following save invocation with the same name will result in a new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> version being created.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">Options:
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> -m, --message TEXT Add a comment describing this Cloud Pod&amp;#39;&lt;/span>s version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -s, --services TEXT Comma-delimited list of services to push in the Cloud Pod &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>all by default&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --visibility TEXT Set the visibility of the Cloud Pod &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span>public&lt;span style="color:#4e9a06">`&lt;/span> or &lt;span style="color:#4e9a06">`&lt;/span>private&lt;span style="color:#4e9a06">`&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>. Does not
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create a new version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Community users have access to a restricted version of the &lt;code>save&lt;/code> command.
In particular, they can simply invoke the &lt;code>save&lt;/code> command with a file URI as an argument.
&lt;/div>
&lt;h3 id="load">&lt;code>load&lt;/code>&lt;/h3>
&lt;p>The &lt;code>load&lt;/code> command is the inverse operation of &lt;code>save&lt;/code>. It retrieves the content of a previously stored Cloud Pod from the local file system or the Cloud Pod&amp;rsquo;s platform and injects it into the application runtime.&lt;/p>
&lt;p>The &lt;code>load&lt;/code> command takes an argument that can either be a URI or a Cloud Pods name. While the first option is available to all users, the second is valid only for licensed ones.&lt;/p>
&lt;p>By default, the injecting state updates the application runtime at a service level. Using the merge injection strategy, the state of all services specified in the injecting state is reflected precisely in the application runtime, while all other active services remain unchanged.&lt;/p>
&lt;p>The &lt;code>--strategy&lt;/code> option can be used to change such default injection behavior. More specifically, the overwrite strategy will ensure the application runtime is an exact instance of the injecting state. The deep-merge strategy will perform a fine-grain merge of the injecting state into the application runtime.&lt;/p>
&lt;p>The CLI manual for the &lt;code>load&lt;/code> command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod load &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> URL_OR_NAME
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Load a Cloud Pod into the running LocalStack container. Users can import Pods different sources:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> community users can store and retrieve Pods from &lt;span style="color:#204a87">local&lt;/span> storage or any provided HTTP URL&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> licensed users can take advantage of the LocalStack Pod&lt;span style="color:#4e9a06">&amp;#39;s platform to ease the storage,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> versioning, and retrieval of Pods.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> The --source option specifies a URI scheme that point to the Cloud Pod&amp;#39;&lt;/span>s resources to import.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> We support the following protocols:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localstack pod load file://&amp;lt;path_to_disk&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localstack pod load https://&amp;lt;some_url&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> localstack pod load git://&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/&amp;lt;local_repo_path&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> The latter option is merely a shortcut &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> --source
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> https://raw.githubusercontent.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;/&amp;lt;branch&amp;gt;/&amp;lt;path&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Importing via a provided --source is available &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> all users. Licensed users can omit this
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> option and simply provide a name &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> their Cloud Pods.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -s, --strategy TEXT Inject strategy &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>merge, overwrite, deep-merge&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Similar to the &lt;code>save&lt;/code> command, the usage of the Cloud Pod&amp;rsquo;s platform is restricted to licensed users. Community users can load a Cloud Pod from a local URI file, URL, or public GitHub repository. However, they have no access to Cloud Pods versioning.
&lt;/div>
&lt;h3 id="delete">&lt;code>delete&lt;/code>&lt;/h3>
&lt;p>The &lt;code>delete&lt;/code> command let users delete a Cloud Pod stored in the remote platform. The CLI manual for the &lt;code>delete&lt;/code> command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod delete &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Delete a Cloud Pod register on the remove LocalStack Pod&lt;span style="color:#4e9a06">&amp;#39;s platform. This command will cancel
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#4e9a06"> all the versions of a created Pod and won&amp;#39;&lt;/span>t be reversible.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --name TEXT Name of the Cloud Pod &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>required&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="inspect">&lt;code>inspect&lt;/code>&lt;/h3>
&lt;p>The &lt;code>inspect&lt;/code> command simply lets the user inspect the content of a Cloud Pod. The CLI manual for the &lt;code>inspect&lt;/code> command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod inspect &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Inspect the contents of a Cloud Pod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --name TEXT Name of the Cloud Pod &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>required&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -f, --format TEXT Format &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>curses, rich, json&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="list">list&lt;/h3>
&lt;p>The &lt;code>list&lt;/code> command lists all of the available Cloud Pods. It shows all the pods available for a single user and its organization by default. If the &lt;code>--public option is passed to the commands, it shows only the Cloud Pods marked as public and are, therefore, available to all licensed users. The CLI manual for the &lt;/code>list` command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod list &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List all the Cloud Pods available &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a single user, or &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> an entire organization, &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> the user
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is part of one.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> With the --public flag, it lists the all the available public Cloud Pods. A public Cloud Pod is
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> available across the boundary of a user ond/or organization. In other words, any public Cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Pod can be injected by any other user holding a LocalStack Pro &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>or above&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> license.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -p, --public List all the available public Cloud Pods
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="versions">versions&lt;/h3>
&lt;p>The &lt;code>versions&lt;/code> command simply lists all the available versions of a Cloud Pod. The CLI manual for the &lt;code>version&lt;/code> command is as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>Usage: python -m localstack.cli.main pod versions &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>OPTIONS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> List the versions available &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a Cloud Pod. Each invocation of the save &lt;span style="color:#204a87">command&lt;/span> is going to
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create a new version &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> a named Cloud Pod, is a Pod with such name already does exist in the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> LocalStack Pods platform.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Options:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -n, --name TEXT Name of the Cloud Pod &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>required&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> --help Show this message and exit.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>User-Guide: DNS Server</title><link>/user-guide/tools/transparent-endpoint-injection/dns-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/transparent-endpoint-injection/dns-server/</guid><description>
&lt;p>LocalStack Pro supports transparent execution mode, which means that your application code automatically accesses the LocalStack APIs as opposed to the real APIs on AWS.&lt;/p>
&lt;p>When the system starts up, the log output contains the IP address of the local DNS server. Typically, this address by default is either &lt;code>0.0.0.0&lt;/code> (see example below) or &lt;code>127.0.0.1&lt;/code> if LocalStack cannot bind to &lt;code>0.0.0.0&lt;/code> due to a conflicting service.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>Starting DNS servers (tcp/udp port 53 on 0.0.0.0)...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>The DNS server can be configured to match your usecase using the &lt;code>DNS_ADDRESS&lt;/code> environment variable.&lt;/p>
&lt;p>To bind the server to &lt;code>127.0.0.1&lt;/code>, you can set:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DNS_ADDRESS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>127.0.0.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can disable the DNS server (which will prevent LocalStack from binding port 53) using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DNS_ADDRESS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can also specify which exact URLs should be redirected to LocalStack by defining a hostname regex like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DNS_LOCAL_NAME_PATTERNS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;.*(ecr|lambda).*.amazonaws.com&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using this configuration, the LocalStack DNS server only redirects ECR and Lambda domains to LocalStack, and the rest will be resolved via &lt;code>$DNS_SERVER&lt;/code>. This can be used for hybrid setups, where certain API calls (e.g., ECR, Lambda) target LocalStack, whereas other services will target real AWS.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
We generally do not recommend connecting to real AWS from within LocalStack, in fact you should avoid using real AWS credentials anywhere in your LocalStack apps. Use this configuration with caution.
&lt;/div>
&lt;p>There is the possibility to manually set the DNS server all not-redirected queries will be forwarded to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">DNS_SERVER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1.1.1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Per default, LocalStack uses the Google DNS resolver at &lt;code>8.8.8.8&lt;/code>.&lt;/p>
&lt;h2 id="self-signed-certificates">Self-signed certificates&lt;/h2>
&lt;p>When you configure transparent execution mode using DNS, you may still have to configure your application&amp;rsquo;s AWS SDK to accept self-signed certificates.
This is a technical limitation caused by the SSL certificate validation mechanism, due to the fact that we are repointing AWS domain names (e.g., &lt;code>*.amazonaws.com&lt;/code>) to &lt;code>localhost&lt;/code>. For example, the following command will fail with an SSL error:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>aws kinesis list-streams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SSL validation failed for https://kinesis.us-east-1.amazonaws.com/ [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: self signed certificate (_ssl.c:1076)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>whereas the following command works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>PYTHONWARNINGS=ignore aws --no-verify-ssl kinesis list-streams
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;StreamNames&amp;#34;: []
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>Disabling SSL validation depends on the programming language and version of the AWS SDK used. For example, the &lt;a href="https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html#boto3.session.Session.client">&lt;code>boto3&lt;/code> AWS SDK for Python&lt;/a> provides a parameter &lt;code>verify=False&lt;/code> to disable SSL verification. Similar parameters are available for most other AWS SDKs.&lt;/p>
&lt;p>For Node.js, you can set this environment variable in your application, to allow the AWS SDK to talk to the local APIs via SSL:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-node.js" data-lang="node.js">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">env&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NODE_TLS_REJECT_UNAUTHORIZED&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Disabling SSL validation may have undesired side effects and security implications.
Make sure to use this only for local testing, and never in production.
&lt;/div>
&lt;h2 id="system-dns-configuration">System DNS configuration&lt;/h2>
&lt;p>In order to use transparent execution mode, the system needs to be configured to use the predefined DNS server.
This is necessary if you want to test code running directly on your system against LocalStack, instead of AWS.
The configuration depends on the operating system.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Please be careful when changing the network configuration on your system, as this may have undesired side effects.
&lt;/div>
&lt;h3 id="macos">macOS&lt;/h3>
&lt;p>In macOS it can be configured in the Network System Settings, under Linux this is usually achieved by configuring &lt;code>/etc/resolv.conf&lt;/code> as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>nameserver 0.0.0.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The example above needs to be adjusted to the actual IP address of the DNS server. You can also configure a custom IP address by setting the &lt;code>DNS_ADDRESS&lt;/code> environment variable (e.g., &lt;code>DNS_ADDRESS=127.0.0.1&lt;/code>).&lt;/p>
&lt;p>If you require access to DNS from the host, &lt;code>docker&lt;/code> must be able to publish port 53 from the LocalStack container to your host.
It can only do this if there are no other processes listening on port 53.&lt;/p>
&lt;p>A common macOS process that listens on port 53 is &lt;code>mDNSResponder&lt;/code>, which is part of the &lt;a href="https://developer.apple.com/bonjour/">Bonjour protocol&lt;/a>.
To find out if a program is listening on a port, run the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># sudo is required if the port is &amp;lt; 1024&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>sudo&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> lsof -P -i :&amp;lt;port&amp;gt; &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep LISTEN
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># e.g. sudo lsof -P -i :53 | grep LISTEN&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If &lt;code>mDNSResponder&lt;/code> is listening on port 53, the output looks like&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo lsof -P -i :53 | grep LISTEN
mDNSRespo 627 _mdnsresponder 54u IPv4 0xbe20f6c354a1802d 0t0 TCP *:53 (LISTEN)
mDNSRespo 627 _mdnsresponder 55u IPv6 0xbe20f6c34d8b9d75 0t0 TCP *:53 (LISTEN)
&lt;/code>&lt;/pre>&lt;p>If this is the case, you can disable &amp;ldquo;Internet Sharing&amp;rdquo; in system preferences, which should disable Bonjour and therefore &lt;code>mDNSResponder&lt;/code>.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
From LocalStack version 2.0.0, LocalStack does not fail to start when ports on the host cannot be bound.
This includes port 53 for DNS.
&lt;/div>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>In Linux, the configuration depends on your network manager/DNS configuration.&lt;/p>
&lt;h4 id="systemd-resolved">systemd-resolved&lt;/h4>
&lt;p>On many modern systemd-based distributions, like Ubuntu, systemd-resolved is used for name resolution.
LocalStack provides a CLI command for exactly this scenario.
To use systemd-resolved and the LocalStack domain resolution, try the following steps.&lt;/p>
&lt;p>Start LocalStack Pro with &lt;code>DNS_ADDRESS=127.0.0.1&lt;/code> as environment variable.
This makes LocalStack bind port 53 on 127.0.0.1, whereas systemd-resolved binds its stub resolver to 127.0.0.53:53, which prevents a conflict.
Once LocalStack is started, you can test the DNS server using &lt;code>dig @127.0.0.1 s3.amazonaws.com&lt;/code> versus &lt;code>dig @127.0.0.53 s3.amazonaws.com&lt;/code>, the former should return an A record &lt;code>127.0.0.1&lt;/code>, the latter the real AWS DNS result.&lt;/p>
&lt;p>Run:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack dns systemd-resolved&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>To revert, please run:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>localstack dns systemd-resolved --revert&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
You need sudo privileges to execute this command.
&lt;/div>
&lt;p>This command sets the DNS server of the bridge interface of the docker network LocalStack currently runs in to the LocalStack container&amp;rsquo;s IP address.
(The command does not work with host networking or without LocalStack running for this reason.)
Also, it configures the DNS route to exclusively (and only) route the following DNS names (and its subdomains) to the LocalStack DNS:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>~amazonaws.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~aws.amazon.com
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~cloudfront.net
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>~localhost.localstack.cloud
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you want to perform this action manually, please do the following steps:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Find out the bridge interface and container IP of your LocalStack container.
Use &lt;code>docker inspect localstack_main&lt;/code> to get the IP address and network, then &lt;code>docker inspect network&lt;/code> to get the interface name.
If the interface name is not mentioned, it is usually the first 12 characters of the network ID prefixed with &lt;code>br-&lt;/code>, like &lt;code>br-0ae393d3345e&lt;/code>.
If you use the default bridge network, it is usually &lt;code>docker0&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Configure the DNS resolver for the bridge network:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix"># &lt;/span>resolvectl dns &amp;lt;network_name&amp;gt; &amp;lt;container_ip&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Set the DNS route to route only the above mentioned domain names (and subdomains) to LocalStack:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix"># &lt;/span>resolvectl domain &amp;lt;network_name&amp;gt; ~amazonaws.com ~aws.amazon.com ~cloudfront.net ~localhost.localstack.cloud&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/li>
&lt;/ol>
&lt;p>In both cases, you can use &lt;code>resolvectl query s3.amazonaws.com&lt;/code> or &lt;code>resolvectl query example.com&lt;/code> to check which interface your DNS request is routed through, to confirm only the above mentioned domains (and its subdomains) are routed to LocalStack.&lt;/p>
&lt;p>When correctly configured, either using the LocalStack CLI command or manually, only the requests for the mentioned domain names are routed to LocalStack, all other queries will resolve as usual.&lt;/p>
&lt;h4 id="other-resolution-settings">Other resolution settings&lt;/h4>
&lt;p>Depending on your Linux distribution, the settings to set a DNS server can be quite different.
In some systems, directly editing &lt;code>/etc/resolv.conf&lt;/code> is possible, like described in &lt;a href="#mac-os">macOS&lt;/a>.
If your &lt;code>/etc/resolv.conf&lt;/code> is overwritten by some service, it might be possible to install and enable/start &lt;code>resolvconf&lt;/code> and specify the nameserver in &lt;code>/etc/resolvconf/resolv.conf.d/head&lt;/code> with &lt;code>nameserver 127.0.0.1&lt;/code>.
This will prepend this line in the resolv.conf file even after changes.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Using these options, every DNS request is forwarded to LocalStack, which will forward queries it does not need to modify (in essence all but certain aws domains).
LocalStack will not store or share any forwarded DNS requests, except maybe in the local logs on exceptions/in debug mode.
&lt;/div>
&lt;h2 id="dns-rebind-protection">DNS Rebind Protection&lt;/h2>
&lt;p>If you rely on your local network&amp;rsquo;s DNS, your router/DNS server might block requests due to the DNS Rebind Protection.
This feature is enabled by default in pfSense, OPNSense, OpenWRT, AVM FritzBox, and potentially also other devices.
Some of the vendors might allow upstream responses in the 127.0.0.0/8 range (like OpenWRT).&lt;/p>
&lt;p>You can check if your DNS setup works correctly by resolving a subdomain of &lt;code>localhost.localstack.cloud&lt;/code>:
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>&lt;span class="command-prefix">$ &lt;/span>dig test.localhost.localstack.cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.16.8-Ubuntu &amp;lt;&amp;lt;&amp;gt;&amp;gt; test.localhost.localstack.cloud
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; global options: +cmd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; Got answer:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 45150
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; OPT PSEUDOSECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>; EDNS: version: 0, flags:; udp: 65494
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; QUESTION SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;test.localhost.localstack.cloud. IN A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; ANSWER SECTION:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test.localhost.localstack.cloud. 10786 IN CNAME localhost.localstack.cloud.
&lt;/span>&lt;/span>&lt;span style="display:flex; background-color:#dfdfdf">&lt;span>localhost.localstack.cloud. 389 IN A 127.0.0.1
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; Query time: 16 msec
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; SERVER: 127.0.0.53#53(127.0.0.53)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; WHEN: Fr Jän 14 11:23:12 CET 2022
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>;; MSG SIZE rcvd: 90&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>If the the DNS resolves the subdomain to your localhost (127.0.0.1), your setup is working.
If not, please check the configuration of your router / DNS if the Rebind Protection is active or &lt;a href="/user-guide/tools/transparent-endpoint-injection/dns-server/#system-dns-configuration">enable the LocalStack DNS on your system&lt;/a>.&lt;/p>
&lt;h2 id="customizing-internal-endpoint-resolution">Customizing internal endpoint resolution&lt;/h2>
&lt;p>The DNS name &lt;code>localhost.localstack.cloud&lt;/code> (and any subdomains like &lt;code>mybucket.s3.localhost.localstack.cloud&lt;/code>) is used internally in LocalStack to route requests, e.g., between a Lambda container and the LocalStack APIs.&lt;/p>
&lt;p>Please refer to the steps in the &lt;a href="/user-guide/aws/route53/">Route53 docs&lt;/a> for more details on how the internal DNS name can be customized.&lt;/p></description></item><item><title>User-Guide: Patched AWS SDKs for Lambdas (Deprecated)</title><link>/user-guide/tools/transparent-endpoint-injection/patched-sdks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/transparent-endpoint-injection/patched-sdks/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
Patched AWS SDKs for Lambdas are &lt;strong>deprecated&lt;/strong> and only used by the old lambda provider.
The new lambda provider (active since LocalStack 2.0) uses DNS-based domain resolution (except for the Ruby runtime).&lt;br>
Please refer to &lt;a href="/user-guide/aws/lambda/">Lambda providers&lt;/a> for more details about the new Lambda implementation.
&lt;/div>
&lt;p>The Lambda runtime in LocalStack uses patched AWS SDKs, which are configured to target the local APIs instead of the real AWS.
This behavior is enabled by default for most Lambda runtimes when using LocalStack Pro.&lt;/p>
&lt;p>Assuming you had a Python Lambda handler that attempts to list all S3 buckets. In the past, you had to manually configure the &lt;code>endpoint_url&lt;/code> parameter on the boto3 client (and potentially use environment switches for dev/prod in your test code):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">boto3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">event&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">boto3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;s3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">endpoint_url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;http://localhost:4566&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">client&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list_buckets&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With the patched AWS SDKs, it now becomes possible to deploy your unmodified production code to LocalStack, simply creating a boto3 client with default settings. The invocations of the boto3 client will be automatically forwarded to the local APIs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">boto3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">handler&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">event&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">client&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">boto3&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">client&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;s3&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">client&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">list_buckets&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
This functionality only works when using the SDKs provided by the Lambda execution environment itself.
If you choose to ship your own SDKs with your Lambda or using a layer, it will fallback to the &lt;a href="/user-guide/tools/transparent-endpoint-injection/dns-server/">DNS based transparent execution&lt;/a> if enabled, since those SDK versions will not be patched.
&lt;/div>
&lt;p>This feature works by patching the AWS SDKs in the docker images, which provide the execution environment for Lambdas within LocalStack.&lt;/p>
&lt;p>The main advantage of this mode is, that no DNS magic is involved, and SSL certificate checks do not have to be disabled.&lt;/p>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;p>If you want to disable this behavior, and use the DNS server to resolve the endpoints for AWS, you can disable this behavior by using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">TRANSPARENT_LOCAL_ENDPOINTS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="supported-runtimes">Supported Runtimes&lt;/h2>
&lt;p>Currently, LocalStack supports patching the SDKs for the following runtimes:&lt;/p>
&lt;ul>
&lt;li>Python (using boto3)&lt;/li>
&lt;li>NodeJS&lt;/li>
&lt;li>Ruby&lt;/li>
&lt;li>Java&lt;/li>
&lt;/ul>
&lt;p>Also, these patched SDKs are only available in the following Lambda execution modes:&lt;/p>
&lt;ul>
&lt;li>docker&lt;/li>
&lt;li>docker-reuse&lt;/li>
&lt;/ul>
&lt;p>This feature is currently not supported for custom Lambda container images.&lt;/p></description></item><item><title>User-Guide: Cloud Pods</title><link>/user-guide/tools/cloud-pods/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/cloud-pods/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
Please note that cloud pods may not be compatible across different versions of LocalStack.
We are actively working on addressing this limitation in the upcoming releases.
&lt;/div>
&lt;p>Cloud Pods are a mechanism that allows you to take a snapshot of the state in your current LocalStack instance, persist it to a storage backend, and easily share it with your team members.&lt;/p>
&lt;p>&lt;img src="pods-persistence.png" alt="Persistence versus Cloud Pods">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Hint&lt;/h4>
To quickly see cloud pods in action, we prepared a small sample application that uses cloud pods to inject its state into a running LocalStack container. &lt;a href="https://app.localstack.cloud/quickstart/demo4">Cloud Pod Thumbnail Sample App&lt;/a>
&lt;/div>
&lt;p>While the &lt;a href="/references/persistence-mechanism/">Persistence&lt;/a> feature ensures that the service state survives container restarts, Cloud Pods go beyond and allow more fine-grained control over your state.&lt;/p>
&lt;p>Instead of simply restoring a state when restarting LocalStack, Cloud Pods allow you to take snapshots of your local instance (with the &lt;code>save&lt;/code> command) and inject such snapshots into a running instance (with the &lt;code>load&lt;/code> command) without requiring a restart.&lt;/p>
&lt;p>In addition, we provide a remote storage backend that can be used to store the state of your running application and share it with your team members.&lt;/p>
&lt;p>You can interact with Cloud Pods via the Web UI, and to load and store the persistent state of pods, you can use the &lt;code>localstack&lt;/code> &lt;a href="/user-guide/tools/cloud-pods/pods-cli/">command-line interface (CLI)&lt;/a>.&lt;/p>
&lt;p>&lt;img src="pods-ui.png" alt="Cloud Pods Web UI">&lt;/p></description></item><item><title>User-Guide: Cloud Pods Launchpad</title><link>/user-guide/tools/cloud-pods/launchpad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/user-guide/tools/cloud-pods/launchpad/</guid><description>
&lt;p>The LocalStack Cloud Pods Launchpad allows you to quickly share and inject cloud pods into a LocalStack instance.&lt;/p>
&lt;h2 id="creating-your-sharable-link">Creating your sharable link&lt;/h2>
&lt;p>Navigate to &lt;a href="https://app.localstack.cloud/launchpad">https://app.localstack.cloud/launchpad&lt;/a> where you can create a sharable link for your pods.&lt;/p>
&lt;p>&lt;img src="link-generator.png" alt="Cloud Pods Launchpad Link Generator">&lt;/p>
&lt;p>Enter a public URl to your pod in the first input field, and click on &amp;lsquo;Generate Link&amp;rsquo;.
The resulting link can be copied and shared with others.&lt;/p>
&lt;p>You can also copy the markdown snippet to quickly add a badge to your repository.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
&lt;p>Please consider that the launchpad takes an arbitrary URL as input and passes it onto your LocalStack instance to inject the pod.
This may lead to unintended side effects, as the URL that is passed to the launchpad is not validated in any way.&lt;/p>
&lt;p>We also display the URL on the UI, so please make sure that your trust the URL when using the launchpad.&lt;/p>
&lt;/div>
&lt;h2 id="adding-a-badge-to-your-repository">Adding a badge to your repository&lt;/h2>
&lt;p>If you want to add a badge to your README that links to the Cloud Pod Launchpad, you can use the following markdown snippet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#204a87;font-weight:bold">![Launch LocalStack Cloudpod&lt;/span>](&lt;span style="color:#c4a000">https://localstack.cloud/gh/launch-pod-badge.svg&lt;/span>)](https://app.localstack.cloud/launchpad?url=url_of_your_pod)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="badge-demo.png" alt="Cloud Pods Badge Demonstration">&lt;/p>
&lt;p>Please note that you have to add the &lt;code>url_of_your_pod&lt;/code> as the &lt;code>url&lt;/code> query parameter to the URL.
For example if you are hosting the pod in the same repository, just use the URL pointing to the raw pod file.
Additionally, you can use the &lt;a href="#creating-your-sharable-link">Link Generator&lt;/a> to create the sharable link for your pod and copy the markdown for your repo.&lt;/p>
&lt;p>Check out a proper example &lt;a href="https://github.com/localstack/cloud-pod-badge" target="_blank">on this GitHub repository&lt;/a>.&lt;/p>
&lt;h2 id="troubleshooting-common-problems">Troubleshooting common problems&lt;/h2>
&lt;p>In this section we present an overview of common problems and how to solve them.&lt;/p>
&lt;h3 id="localstack-is-not-running">LocalStack is not running&lt;/h3>
&lt;p>In case your LocalStack instance is not running, you will see the following error message:&lt;/p>
&lt;p>&lt;img src="ls-not-running.png" alt="Cloud Pods Launchpad Error LocalStack not running">&lt;/p>
&lt;p>Please start up your LocalStack instance and try again.
Find out more about how to start LocalStack in the &lt;a href="/user-guide/tools/cloud-pods/getting-started/">Getting Started&lt;/a> section.&lt;/p>
&lt;h3 id="failed-to-load-metadata">Failed to load metadata&lt;/h3>
&lt;p>In case the launchpad fails to load the metadata of your pod, you will see the following error message:&lt;/p>
&lt;p>&lt;img src="metadata-load-failed.png" alt="Cloud Pods Launchpad Error failed to load metadata">&lt;/p>
&lt;p>This can happen if the pod is not available anymore or if the URL is not valid.
Please check the URL and try again.&lt;/p>
&lt;h3 id="failed-to-inject-pod">Failed to inject pod&lt;/h3>
&lt;p>In case the launchpad fails to inject the pod into your LocalStack instance, you will see &amp;lsquo;Pod injection failed&amp;rsquo; in the log message.
This may be due to a couple of reasons, like version mismatch.
Please check out your LocalStack logs for more information.&lt;/p></description></item></channel></rss>